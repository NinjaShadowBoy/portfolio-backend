# ===============================================================
# My personal website - APPLICATION PROPERTIES
# ===============================================================
# Properties file for personal website
# ===============================================================

# ======================
# APPLICATION CONFIG
# ======================
# Basic application settings
spring.application.name=portfolio
server.port=${PORT:8080}
#server.servlet.context-path=/

# ======================
# JWT CONFIGURATION
# ======================
# JWT secret key (CHANGE IN PRODUCTION!)
jwt.secret=${JWT_SECRET:404E635266556A586E3072357538782F413F4428472B4B6250645367566B5970}
# JWT token expiration time in milliseconds (default: 24 hours)
jwt.expiration=${JWT_EXPIRATION:86400000}
# JWT token issuer
jwt.issuer=${JWT_ISSUER:NinjaShadowBoy-PortfolioApp}

# ======================
# DATABASE CONFIG
# ======================
# PostgreSQL database connection
# Render provides individual DB connection parameters via environment variables
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/portfolio}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection pool settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000

# JPA/Hibernate settings
# 'update' is safe for development: creates/updates tables automatically
spring.jpa.hibernate.ddl-auto=update
# Show and format SQL in logs (helpful for debugging)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# MySQL dialect setting
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Performance settings
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.open-in-view=false
# Initialize database with data.sql (set to 'always' to run every time)
spring.sql.init.mode=never
spring.sql.init.platform=mysql

# ======================
# SPRING SECURITY CONFIG
# ======================
# Security settings for authentication/authorization
# Default users (REMOVE IN PRODUCTION!)
spring.security.user.name=admin
spring.security.user.password=admin
spring.security.user.roles=ADMIN
# Session management
server.servlet.session.timeout=30m
# CSRF protection enabled by default
#spring.security.csrf.enabled=true
# Remember me functionality (30 days)
spring.security.remember-me.token-validity-seconds=2592000
# Account lockout policy (custom properties)
security.account.max-failed-attempts=5
security.account.lock-duration-minutes=30

# ======================
# OAUTH2 CONFIGURATION
# ======================
# OAuth2 redirect URI for frontend after successful authentication
app.oauth2.redirect-uri=${OAUTH2_REDIRECT_URI:http://localhost:4200/oauth2/redirect}

# Google OAuth2
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_BASE_URL:http://localhost:8080}/login/oauth2/code/google

# GitHub OAuth2
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:your-github-client-id}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:your-github-client-secret}
spring.security.oauth2.client.registration.github.scope=user:email,read:user
spring.security.oauth2.client.registration.github.redirect-uri=${OAUTH2_BASE_URL:http://localhost:8080}/login/oauth2/code/github

# Facebook OAuth2
spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID:your-facebook-app-id}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET:your-facebook-app-secret}
spring.security.oauth2.client.registration.facebook.scope=email,public_profile
spring.security.oauth2.client.registration.facebook.redirect-uri=${OAUTH2_BASE_URL:http://localhost:8080}/login/oauth2/code/facebook

# Facebook provider configuration (required for Facebook OAuth2)
spring.security.oauth2.client.provider.facebook.authorization-uri=https://www.facebook.com/v12.0/dialog/oauth
spring.security.oauth2.client.provider.facebook.token-uri=https://graph.facebook.com/v12.0/oauth/access_token
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture


# ======================
# RESOURCES CONFIG
# ======================
# Static resources (CSS, JS, images)
spring.web.resources.static-locations=classpath:/static/
# No caching during development
spring.web.resources.cache.period=0
# Resource chain optimization
spring.web.resources.chain.enabled=true
spring.web.resources.chain.strategy.content.enabled=true
spring.web.resources.chain.compressed=true

# ======================
# FILE UPLOAD CONFIG
# ======================
# For hotel/room images and documents
profile-photo.upload.dir=${PROFILE_PHOTO_UPLOAD_DIR:uploads/profilephoto}
photo.upload.dir=${PHOTO_UPLOAD_DIR:uploads/photos}
#file.allowed-types=image/jpeg,image/png,image/gif
# Maximum file size for upload (10MB)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=15MB
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB

# ======================
# EMAIL CONFIG
# ======================
# Email configuration for booking confirmations & notifications
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=traintype@gmail.com
spring.mail.password=yourAppPassword
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.timeout=5000
# Email templates location
#email.template.confirmation=email/booking-confirmation
#email.template.cancellation=email/booking-cancellation
#email.template.refund=email/refund-confirmation
# Enable/disable email sending (for testing)
email.sending.enabled=true

# ======================
# API DOCUMENTATION
# ======================
# Swagger/OpenAPI configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true
springdoc.swagger-ui.syntaxHighlight.activated=true

# API info
springdoc.info.title=Portfolio API
springdoc.info.description=API for managing personal portfolio projects, photos, and user authentication
springdoc.info.version=1.0.0
springdoc.info.contact.name=NinjaShadowBoy
springdoc.info.contact.email=admin@portfolio.com
springdoc.info.contact.url=https://github.com/NinjaShadowBoy

# Show/hide endpoints
springdoc.show-actuator=false
springdoc.paths-to-match=/api/v1/**

# Enable validation
springdoc.override-with-generic-response=false
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# ======================
# INTERNATIONALIZATION
# ======================
# Message resources for multi-language support
spring.messages.basename=i18n/messages
spring.messages.fallback-to-system-locale=false
spring.messages.encoding=UTF-8
# Available locales (add more as needed)
application.locales=en,fr,es,de,zh

# ======================
# CACHING CONFIG
# ======================
# Cache settings for better performance
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=500,expireAfterAccess=60s

# ======================
# LOGGING CONFIGURATION
# ======================
# Logging Levels (ordered from least to most verbose):
# 1. OFF     - No logging
# 2. FATAL   - Severe errors that cause premature termination
# 3. ERROR   - Runtime errors/exceptional conditions
# 4. WARN    - Undesirable but not wrong situations
# 5. INFO    - Important runtime events (startup/shutdown)
# 6. DEBUG   - Detailed flow information
# 7. TRACE   - Most detailed information (method entry/exit)

logging.level.root=OFF
# Application-specific package (update with your actual package structure)
logging.level.com.ninjashadowboy.portfolio=DEBUG
#logging.level.cm.sji.hotel_reservation=DEBUG
#logging.level.cm.sji.hotel_reservation.controllers.api.BookingsAPI=DEBUG
# Framework logging
#logging.level.org.springframework=WARN
logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework.security=WARN
#logging.level.org.hibernate=WARN
#logging.level.org.hibernate.SQL=WARN
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Console output formatting
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %clr(%5p) [%thread] %cyan(%logger{15}) - %msg%n

# File logging configuration
#logging.file.name=logs/hotel-reservation.log
#logging.logback.rollingpolicy.max-file-size=10MB
#logging.logback.rollingpolicy.max-history=7
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ======================
# DEV TOOLS & PROFILES
# ======================
# Enable automatic restart during development
spring.devtools.restart.enabled=true
# Active profile (dev, test, or prod)
spring.profiles.active=dev

# Spring MVC configuration
spring.mvc.view.prefix=classpath:/templates/
spring.mvc.view.suffix=.html
spring.mvc.static-path-pattern=/static/**

# ======================
# MANAGEMENT & MONITORING
# ======================
# Actuator endpoints for system monitoring
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
# Application info (shown in /actuator/info)
management.info.env.enabled=true
info.app.name=portfolio
info.app.description=Online Typing Platform
info.app.version=1.0.0
